<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Kendall Morgan</title>
        <link>https://kendallmorgan.com/posts/</link>
        <description>Recent content in Posts on Kendall Morgan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 29 Jul 2020 20:45:47 -0700</lastBuildDate>
        <atom:link href="https://kendallmorgan.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Thoughts on Code Reviews</title>
            <link>https://kendallmorgan.com/posts/thoughts-on-code-reviews/</link>
            <pubDate>Tue, 20 Jul 2021 17:54:11 -0700</pubDate>
            
            <guid>https://kendallmorgan.com/posts/thoughts-on-code-reviews/</guid>
            <description>My company hosts engineering discussion panels and recently I have been a part of our code review discussions. Participating in these panels has forced me think intentionally about how I approach code reviews. This is an attempt to synthesize my approach.
Overview I learn most efficiently when giving and receiving reviews and it seems to stick better than just reading or hearing advice passively. I see them as a way for me to help better others, help better myself, and help better the software that I build.</description>
            <content type="html"><![CDATA[<p>My company hosts engineering discussion panels and recently I have been a part of our code review discussions. Participating in these panels has forced me think intentionally about how I approach code reviews. This is an attempt to synthesize my approach.</p>
<h2 id="overview">Overview</h2>
<p>I learn most efficiently when giving and receiving reviews and it seems to stick better than just reading or hearing advice passively. I see them as a way for me to help better others, help better myself, and help better the software that I build.</p>
<p>I have also learned that code reviews are should not be primarily used to catch bugs, that&rsquo;s just a side effect. Code reviews are effective as a learning and teaching tool. They help elevate the ability of the people you build software with. The constant feedback cycle of doing and receiving code reviews is a useful tool for increasing software quality and readability. When doing code reviews you know someone else needs to understand your code and this helps emphasize clear and expressive code.</p>
<h2 id="receiving-reviews">Receiving Reviews</h2>
<h3 id="review-your-code-first">Review your code first</h3>
<p>Before asking someone else to do a code review, review it yourself. I usually do this in the actual CR tool. This is an easy way to catch small things that you miss when heads down coding.</p>
<h3 id="assign-someone-specific">Assign someone specific</h3>
<p>If there isn&rsquo;t a specific owner then often times code reviews get delayed. It&rsquo;s not that others shouldn&rsquo;t look at it, but you want someone to be responsible for it. This prevents the <a href="https://en.wikipedia.org/wiki/Bystander_effect">bystander effect</a>.</p>
<h3 id="be-kind-to-your-reviewer">Be kind to your reviewer</h3>
<h4 id="give-as-much-context-as-possible">Give as much context as possible</h4>
<p>Usually team members are familiar enough with your work that they have context already, but you can&rsquo;t make that assumption. The intent of the change should be clear. This is easily done by making sure the description in the CR is accurate and updated. If there are diagrams or design docs related to the change, link them in the CR. Make sure the description in the issue tracker is up to date and link that in the CR.</p>
<h4 id="try-to-keep-reviews-small">Try to keep reviews small</h4>
<p>This is one of the hardest things for me, but try to break changes into digestible pieces. If I see a review that is thousands of lines long and touches tens of files I dread it. I try to be conscious of that feeling when asking others to review my code. If a change does become large, break it up into smaller components and review each of those individually.</p>
<h2 id="doing-reviews">Doing Reviews</h2>
<h3 id="be-quick">Be Quick</h3>
<p>Often times when someone asks you for a code review they become blocked on you completing the review to finish work. There is usually a tree of dependencies waiting for each review and getting them done quickly helps the entire team.</p>
<p>I recommend setting aside time for code reviews in 2 ways:</p>
<ol>
<li>Check for assigned code reviews before standup.</li>
<li>Check for assigned code reviews after submitting one myself.</li>
</ol>
<p>When I do see a code review that I am responsible for I ensure that I look at it before I start any new tasks with one exception: large reviews. If a code review is large and will take longer than 15 - 20 minutes then block out time to look at it later that day.</p>
<p>With this approach I usually have a 24hr or less turn around for code reviews. This also give me something productive to do between waiting for my own reviews or starting a new task.</p>
<h3 id="gain-context">Gain Context</h3>
<p>When reviewing code you are likely to have some context around the change already. If you do not have context already  be sure you understand what the change does and why. The goal here is to ensure that you know what you are reviewing and the scope of the change.</p>
<p>If you were involved in the design or conception of a particular feature this step is fast. I start by looking at the ticket or merge request description to get the big picture. Next I will look at the commit messages. These are often smaller than a change description, but helps to understand the scope of a change. If I still don&rsquo;t have enough context then I reach out to the requester and ask for clarification.</p>
<h3 id="automate-the-boring-things">Automate the boring things</h3>
<p>A huge time sink in code reviews is feedback that should be caught with a linter or formatter. It&rsquo;s common to see comments like &ldquo;This variable should be final&rdquo;. This is low hanging fruit and should be caught before a code review starts. Teams should standardize on a style guide and use common linters to analyze code before it is reviewed. If there is something in a code review that seems like it should be caught with a linter then you should update the linter. This prevents noise in a code review that can cost time and increase cognitive load.</p>
<h3 id="start-with-the-tests">Start with the tests</h3>
<p>Once I understand the scope and intent of a change I start by looking at the tests. This usually gives me examples of typical call patterns and implementation expectations. I can also usually tease out assumptions and identify system boundaries based on mocked classes.</p>
<h3 id="watch-the-boundaries">Watch the boundaries</h3>
<p>When looking at a CR I ask myself two questions:</p>
<ol>
<li>Are we changing data coming into the system?</li>
<li>Are we changing data going out of the system?</li>
</ol>
<p>If the answer to any of these are yes I tend to look at things on these boundaries more intently. A short list of things I think about at the boundaries of a system include:</p>
<ol>
<li>Backwards compatibility</li>
<li>API design</li>
<li>Dependency coupling.</li>
</ol>
<p>There is a lot of opportunity at boundaries to introduce errors and changes at boundaries can have a large blast radius.</p>
<h3 id="darins-law-cover-your-ass">Darin&rsquo;s Law: Cover your A.S.S.</h3>
<p>When dealing with large scale systems there is a lot that can go wrong. At Amazon I worked with a principal engineer who distilled this down to 3 topics: Availability, Security, and Support. While doing code reviews I always keep those things in mind.</p>
<p>To ensure you are covering your A.S.S it use useful to ask your self:</p>
<ol>
<li>Can this change cause failure in your service or a dependency?</li>
<li>Is this change doing anything that can impact customer data?</li>
<li>Will I be able to diagnose issues with this change later?</li>
<li>Will I be able to easily update this code path later?</li>
</ol>
<h2 id="summary">Summary</h2>
<p>Code review is a useful tool for helping improve both software quality and technical acumen. The code review process is fun and has been a key component of my growth as an engineer. When requesting code reviews remember to be kind to your reviewer, you want to make the process of getting feedback as painless as possible. While reviewing code pay attention to your boundaries, and don&rsquo;t forget: Cover your A.S.S. in code reviews.</p>
]]></content>
        </item>
        
        <item>
            <title>Helping Someone Learn to Program</title>
            <link>https://kendallmorgan.com/posts/helping-someone-learn-to-program/</link>
            <pubDate>Sun, 04 Jul 2021 16:26:56 -0700</pubDate>
            
            <guid>https://kendallmorgan.com/posts/helping-someone-learn-to-program/</guid>
            <description>A family member came to me and said that he is interested in learning how to program. Reflecting on my experience learning software in academia I started to think about how I would want to learn programming if I didn&amp;rsquo;t do so in school.
There are a few key goals I would want to focus on if I was starting out:
 Have a concrete project in mind. Learn how to get started quickly.</description>
            <content type="html"><![CDATA[<figure class="center"><img src="/img/teaching-code.png"/>
</figure>

<p>A family member came to me and said that he is interested in learning how to program. Reflecting on my experience learning software in academia I started to think about how I would want to learn programming if I didn&rsquo;t do so in school.</p>
<p>There are a few key goals I would want to focus on if I was starting out:</p>
<ul>
<li>Have a concrete project in mind.</li>
<li>Learn how to get started quickly.</li>
<li>Make something useful to put what I am learning into context.</li>
</ul>
<p>With this in mind I am hoping to point him in a direction that will accelerate his learning and excitement for software. One of the key things with how I am helping is that I don&rsquo;t have the capacity to be a teacher. I want to get him to a place where he can ask me specific questions. I want our conversations to go from &ldquo;How can I learn how to program?&rdquo; to &ldquo;How do I add text to a file instead of the console?&rdquo;</p>
<h2 id="getting-started">Getting Started</h2>
<h3 id="language">Language</h3>
<p><a href="https://www.python.org/downloads/release/python-396/">Python3</a></p>
<p>Python is a good language to start out with for a ton of reasons. It is easy to get started with, but can become more complex as needed. It can be a bicycle or a rocket ship based on your needs. You can start with a file of just function calls and see something quickly, but you can also build up to object oriented programming and learn more advanced concepts as you need them.</p>
<p>With python you can get started with something as simple as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Hello, world!&#39;</span>)
</code></pre></div><p>When you start to dig into more advanced features you can migrate to something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Program</span>():
	
	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self):
		print(<span style="color:#e6db74">&#39;Hello, world!&#39;</span>)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
	program <span style="color:#f92672">=</span> Program()
	program<span style="color:#f92672">.</span>run()
</code></pre></div><p>This allows you to get something working fast without needing to understand classes, instances, methods, etc.</p>
<p>As you learn more and want to get into a specific domain the concepts you learn in python will be transferable.</p>
<h3 id="tools">Tools</h3>
<ul>
<li><a href="https://code.visualstudio.com/">VS Code</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension for VS Code</a></li>
</ul>
<p>VS Code is similar to python in the sense that it can grow as you need it. It can start out as a simple text editor, but with plugins you can do things like run a <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.devicesimulatorexpress">microcontroller simulator</a>. Like Python, VS Code is so popular that if you run into questions you can easily find a ton of online resources to help.</p>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="https://automatetheboringstuff.com/2e/">Automate The Boring Stuff</a></li>
<li><a href="https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW&amp;index=1">Automate The Boring Stuff Course</a></li>
</ul>
<p>There are a ton of tutorials, blogs, classes, etc that can help you get started, but my main goal is to get started doing something useful quickly. As such I think Automate The Boring Stuff is one of the best resource you can start with. It wont necessarily teach you how to become a software engineer, but it will teach you how to solve problems with code. It will give you the tools to build useful things to solve problems. Once you work through parts of the book there you should be at a point where you can build out solutions. You will also be able to read some basic source code to be able to start to understand this vast world of software.</p>
<h2 id="goals">Goals</h2>
<p>Over 2 - 3 weeks I think there are some concrete things should be done.</p>
<ul>
<li>Have a project in mind that you can build up to. Write it down and think of the requirements: What do you want it to do? What data does it need? What data do you need to get out of it?</li>
<li>Finish Chapter 0-3 of Automate The Boring Stuff.</li>
<li>Watch lessons 1-11 of the playlist. (these go over chapter 0-3) of the book</li>
</ul>
<h2 id="summary">Summary</h2>
<p>In my experience useful summaries come in the form of questions that can be answered after working through material.</p>
<p>At the end of the couple of weeks spent working towards learning you should be able to answer all of these questions:</p>
<ul>
<li>What is a program?</li>
<li>What is a variable?</li>
<li>What is a conditional?</li>
<li>What is a for loop?</li>
<li>What is a function?</li>
<li>Explain how to use loops and conditionals to print out the song &ldquo;99 Bottles of Beer on the Wall&rdquo;
<ul>
<li>Write a program to do this.</li>
</ul>
</li>
<li>Describe a problem you currently have that you can use programming to solve.</li>
</ul>
<p>After getting comfortable with these things you should start to build on what you have learned so far to get deeper into programming. The goal is to have a project in mind that you can start working on to apply what you learn. You should also be at a place where you can ask pointed questions and get direction rather than ambiguous questions.</p>
<h2 id="references">References</h2>
<p>As I worked through the best ways to learn how to program these resources help influence my approach.</p>
<ul>
<li><a href="https://norvig.com/21-days.html">https://norvig.com/21-days.html</a></li>
<li><a href="https://course.fast.ai/videos/?lesson=1">https://course.fast.ai/videos/?lesson=1</a></li>
<li><a href="https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators">https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>My First Post</title>
            <link>https://kendallmorgan.com/posts/my-first-post/</link>
            <pubDate>Wed, 29 Jul 2020 20:46:29 -0700</pubDate>
            
            <guid>https://kendallmorgan.com/posts/my-first-post/</guid>
            <description>Expect to see more from me soon. Until then:
print(&amp;#39;Hello, world&amp;#39;) </description>
            <content type="html"><![CDATA[<p>Expect to see more from me soon. Until then:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Hello, world&#39;</span>)
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
