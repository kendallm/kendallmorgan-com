<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on Kendall Morgan</title>
    <link>https://kendallmorgan.com/tags/software-engineering/</link>
    <description>Recent content in software engineering on Kendall Morgan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 20 Jul 2021 17:54:11 -0700</lastBuildDate><atom:link href="https://kendallmorgan.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thoughts on Code Reviews</title>
      <link>https://kendallmorgan.com/posts/thoughts-on-code-reviews/</link>
      <pubDate>Tue, 20 Jul 2021 17:54:11 -0700</pubDate>
      
      <guid>https://kendallmorgan.com/posts/thoughts-on-code-reviews/</guid>
      <description>My employer, Indeed.com, hosts engineering discussion panels and recently I have been a part of our code review discussions. Participating in these panels has forced me think intentionally about how I approach code reviews. This is an attempt to synthesize my approach.
Overview I learn most efficiently when giving and receiving reviews and it seems to stick better than just reading or hearing advice passively. I see them as a way for me to help better others, help better myself, and help better the software that I build.</description>
    </item>
    
  </channel>
</rss>
